name: Terraform Create
description: Terraform Plan & Apply
inputs:
  working-directory:
    required: true
    description: Path to filter on infrastructurual changes

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4

    - name: Login To Azure
      uses: azure/login@v2
      with:
        tenant-id: ${{ env.ARM_TENANT_ID }}
        subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
        client-id: ${{ env.ARM_CLIENT_ID }}
    
    - uses: hashicorp/setup-terraform@v3

    - name: Terraform Format
      id: fmt
      if: github.event_name == 'pull_request'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: terraform fmt -check
      continue-on-error: true  
      
    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: terraform init

    - name: Terraform Validate
      id: validate
      if: github.event_name == 'pull_request'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: terraform plan -no-color

    - uses: actions/github-script@v7
      continue-on-error: true
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ github.token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style ${{ github.workflow }}')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style ${{ github.workflow }} üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Terraform Apply
      if: github.event.base_ref == 'refs/heads/main' || github.ref == 'refs/heads/main'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: terraform apply --auto-approve