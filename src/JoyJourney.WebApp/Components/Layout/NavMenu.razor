@implements IDisposable

@inject NavigationManager NavigationManager

<MudAppBar Elevation="1">
    <MudNavMenu Class="mud-navmenu-horizontal px-1">
        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <MudNavLink Href="weather" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Weather</MudNavLink>
        <MudNavLink Href="auth" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Lock">Auth</MudNavLink>

        <AuthorizeView>
            <Authorized>
                <MudMenu Label="@context.User.Identity?.Name" Color="Color.Inherit" Class="mud-nav-link">
                    <MudMenuItem Href="/account/manage" Icon="@Icons.Material.Filled.Settings">Settings</MudMenuItem>
                    <form class="mud-menu-item mud-ripple mud-list-item-clickable" action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit">
                            <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout
                        </button>
                    </form>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Register</MudNavLink>
                <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">Login</MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudNavMenu>
</MudAppBar>

<style>
    .mud-toolbar-appbar {
        justify-content: center;
    }

    .mud-navmenu-horizontal {
        display: flex;
        flex-direction: row;
    }

    .mud-nav-link {
        font-weight: bold !important;
        font-size: larger;
    }

    form {
        padding: 0;
    }
</style>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

